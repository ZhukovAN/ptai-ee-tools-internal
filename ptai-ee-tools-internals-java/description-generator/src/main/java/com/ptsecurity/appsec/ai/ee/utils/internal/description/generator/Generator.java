/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.ptsecurity.appsec.ai.ee.utils.internal.description.generator;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ptsecurity.appsec.ai.ee.scan.result.ScanBrief;
import com.ptsecurity.appsec.ai.ee.utils.internal.description.generator.dto.IssueDescription;
import org.apache.commons.lang3.StringUtils;
import picocli.CommandLine;

import java.io.File;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.concurrent.Callable;

import static org.joor.Reflect.on;

@CommandLine.Command(name = "java -jar description-generator.jar", mixinStandardHelpOptions = true, version = "1.0",
        description = "Enriches issue description JSON file with Java engine vulnerabilities")
public class Generator implements Callable<Integer> {

    @CommandLine.Parameters(index = "0", description = "The issue description JSON file to be enriched with Java engine vulnerability types")
    private Path json;

    @CommandLine.Option(names = { "--poc" }, description = "poc.jar file path", required = true)
    private Path poc;

    @Override
    public Integer call() throws Exception {
        if (!json.isAbsolute())
            json = Paths.get(System.getProperty("user.dir")).resolve(json);
        ObjectMapper mapper = new ObjectMapper();
        IssueDescription[] issueDescriptions = mapper.readValue(json.toFile(), IssueDescription[].class);
        Map<String, IssueDescription> identities = new HashMap<>();
        for (IssueDescription issueDescription : issueDescriptions)
            identities.put(issueDescription.getIdentity().toUpperCase(), issueDescription);

        if (!poc.isAbsolute())
            poc = Paths.get(System.getProperty("user.dir")).resolve(poc);
        URL pocUrl = poc.toFile().toURI().toURL();
        URLClassLoader child = new URLClassLoader(
                new URL[] {pocUrl},
                Generator.class.getClassLoader()
        );
        Class type = Class.forName("ru.ptsecurity.ai.vulnerabilities.PredefinedVulnerabilityType", true, child);
        for (Object value : type.getEnumConstants()) {
            String description = on(value).get("description");
            int id = on(value).get("id");
            String patternKey = on(value).get("patternKey");
            if (StringUtils.isEmpty(description)) {
                System.err.println("Skip " + id);
                continue;
            }

            IssueDescription issueDescription = identities.get(description.toUpperCase());
            if (null == issueDescription) {
                issueDescription = identities.get(patternKey.toUpperCase());
                if (null == issueDescription) {
                    System.err.println("Skip " + id + " : " + patternKey);
                    continue;
                }
            }
            if (null == issueDescription.getLanguages())
                issueDescription.setLanguages(new HashSet<>());
            issueDescription.getLanguages().add(ScanBrief.ScanSettings.Language.JAVA);
        }

        File jsonOut = json.getParent().resolve(UUID.randomUUID() + ".json").toFile();
        mapper.writeValue(jsonOut, issueDescriptions);
        System.out.println("Enriched issues file saved as " + jsonOut.getName());

        return 0;
    }

    public static void main(String... args) {
        int exitCode = new CommandLine(new Generator()).execute(args);
        System.exit(exitCode);
    }
}
